#
# Unit tests and examples for Gnu::Eval (gscript)
# Craig Fitzgerald 2020-09-06

var tests = 0;
var passes = 0;
var fails = 0;

assert (id, val, expect, ok) => {
   tests++;
   if (ok) {
      if(echo) print("test {id} passed ");
      if(echo) println("({val} <=> {expect})");
      passes++;
   } else {
      fails++;
      print("test {id} failed ");
      println("({val} <=> {expect})");
   }      
}

cmpv(val, expect) => {val == expect}
cmps(val, expect) => {val eq expect}
cmpa(val, expect) => {abs(val - expect) < 0.0000001}

assertv(id, val, expect) => {assert(id, val, expect, cmpv(val, expect))}
asserts(id, val, expect) => {assert(id, val, expect, cmps(val, expect))}
asserta(id, val, expect) => {assert(id, val, expect, cmpa(val, expect))}


println("------ tests ------");

var x;
var y;

print("This is a test of print\n");
println("This is a test of println");

asserts('FN00', sprintf('Z'), "Z"               );
assertv('FN01', int(11.11)  , 11                );
assertv('FN02', abs(-5)     , 5                 );
asserta('FN03', exp(4)      , 54.5981500331442  );
asserta('FN04', log(50)     , 3.91202300542815  );
assertv('FN05', log10(100)  , 2                 );
assertv('FN06', sqrt(81)    , 9                 );
assertv('FN07', srand(2323) , 2323              );
asserta('FN08', rand(100)   , 4.45910662683708  );
asserta('FN09', sin(PI/4)   , 0.707106781186547 );
asserta('FN10', cos(PI/4)   , 0.707106781186548 );
asserta('FN11', atan(4, 3)  , 0.927295218001612 );
asserta('FN12', asin(.43)   , 0.444492776935819 );
asserta('FN13', acos(.55)   , 0.988432088926153 );
assertv('FN14', oct(60)     , 48                );
assertv('FN15', hex(60)     , 96                );

# length, count, keys, defined - tested later

assertv('ID00', 0                   , 0      );
assertv('ID01', 1                   , 1      );
assertv('ID02', 1 + 2               , 3      );
assertv('ID03', 1 + 2 + 3           , 6      );
assertv('ID04', 10 - 6              , 4      );
assertv('ID05', 10 - 6 - 1          , 3      );
assertv('ID06', 10 * 9              , 90     );
assertv('ID07', 10 * 9 * 2          , 180    );
assertv('ID08', 15 / 5              , 3      );
assertv('ID09', 15 / 5 / 2          , 1.5    );
assertv('ID10', 33 % 10             , 3      );
assertv('ID11', 6 ** 3              , 216    );
assertv('ID12', -7                  , -7     );
assertv('ID13', +7                  , 7      );
assertv('ID14', 6 - -6              , 12     );
assertv('ID15', 5 + 4 * 3           , 17     );
assertv('ID16', 5 + 5 + 5           , 15     );
assertv('ID17', 5 - 5 - 5           , -5     );
assertv('ID18', (5 - 5) - 5         , -5     );
assertv('ID19', 5 - (5 - 5)         , 5      );
assertv('ID20', x = 8               , 8      );
assertv('ID21', y = 9               , 9      );
assertv('ID22', x < y               , 1      );
assertv('ID23', x > y               , 0      );
assertv('ID24', x >= y              , 0      );
assertv('ID25', x <= y              , 1      );
assertv('ID26', x == y              , 0      );
assertv('ID27', true                , 1      );
assertv('ID28', false               , 0      );
assertv('ID29', true || false       , 1      );
assertv('ID30', true && false       , 0      );
assertv('ID31', "fred" eq "fred"    , 1      );
assertv('ID32', "fred" eq "barney"  , 0      );
assertv('ID33', "fred" lt "barney"  , 0      );
assertv('ID34', "fred" gt "barney"  , 1      );
assertv('ID35', "fred" ne "barney"  , 1      );
assertv('ID36', "fred" cmp "barney" , 1      );
assertv('ID37', 7 <=> 9             , -1     );
assertv('ID38', 9 <=> 7             , 1      );
assertv('ID39', true ? x : y        , 8      );
assertv('ID40', false ? x : y       , 9      );
assertv('ID41', "a" eq "b" ? 1:false, 0      );
assertv('ID42', "a" eq "a" ? 1:0    , 1      );
assertv('ID43', y**2                , 81     );
assertv('ID44', a1 = 876            , 876    );
assertv('ID45', a2 = 123.456        , 123.456);
assertv('ID47', y=9                 , 9      );
assertv('ID48', ++y                 , 10     );
assertv('ID49', y=9                 , 9      );
#assertv('ID50', y++                 , 9      );  # known issue
#assertv('ID51', y                  , 10      );

# recursive fn's
S(x) => {x < 1 ? 1 : (x % 2 ? S(x-1)+S(x-2) : S(x-3)+S(x-4))};
assertv('ID52', S(20)               , 352    );
F1(x)=>{x**2/(x+x)}; F2(x)=>{F1(x)/3};
assertv('ID53', F1(50)              , 25     );

# multi param fn's
F2(x,y) => {x*x + y*y + x + y};
assertv('ID54', F2(6,7)              , 98    );

# if / else
var answer = "";
if (2 > 10) 
   { answer = "broke!" } 
else 
   { answer = "OK!"}
asserts('ID55', answer               , "OK!" );

# for loop & string concat
var strX = "X"; var strY = "";
for (x=0; x<5; x++) 
   { strY = strY . strX; }
asserts('ID56', strY               , "XXXXX" );

# while loop
var strZ = "";
var z = 7;
while (z > 0) 
   {strZ = strZ . strX; z--}
asserts('ID57', strZ               , "XXXXXXX" );

# var scoping with 'var'
sc1=1;
assertv('ID58', sc1=1, 1);
{
   var sc1 = 10;
   assertv('ID59', sc1, 10);
}
assertv('ID60', sc1, 1);

sc2=1;
assertv('ID61', sc2=1, 1);
{
   sc2 = 10;
   assertv('ID62', sc2, 10);
}
assertv('ID63', sc2, 10);

sc0=1;
assertv('ID64', sc0=1, 1);
{
   sc0++;
   assertv('ID65', sc0, 2);
}
assertv('ID65', sc0, 2);

# hashes
var hash1;
hash1["fred"] = 123;
hash1["bill"] = "billy";
hash1["stan"] = 4.0176;
assertv('ID66', hash1["fred"], 123    );
asserts('ID67', hash1["bill"], "billy");
assertv('ID68', hash1["stan"], 4.0176 );
assertv('ID74', count(hash1), 3);

# hash assign
var hash2 = hash1;
assertv('ID69', hash2["fred"], 123    );

# hash element assign
var hash3;
hash3["stuffy"] = hash2["bill"];
asserts('ID70', hash3["stuffy"], "billy");

# interpolation in double quoted strings
var height = 99;
var person = sprintf("craig, height {height}");
asserts('ID71', person, "craig, height {height}");
asserts('ID72', person, "craig, height 99");


# fn returning string
q(z) => {"QQQQQ"}
var q0 = q(1);
asserts('ID73', q0, "QQQQQ");

# string length
var name = "billy-bob";
assertv('ID74', length(name), 9);

# array of array
h1[0] = "aaa";
h2[0] = "bbb";
h1[1] = h2;
asserts('ID75', h1[1][0]   , "bbb");
asserts('ID76', (h1[1])[0] , "bbb");

# hash of hash
h3["a"] = "aaaaa";
h4["a"] = "bbbbb";
h3["b"] = h4;
asserts('ID77', h3["b"]["a"]   , "bbbbb");
asserts('ID78', (h3["b"])["a"] , "bbbbb");

# more interpolation of double quoted strings
var interv1 = 555;
var interv2 = 5.55;
var interv3 = "fives";
var interh1;
interh1["fred"] = 123;
var intera1;
intera1[0] = 456;
asserts('ID79', sprintf("qqq {interv1} qqq"        ), "qqq 555 qqq");   # interpolate int
asserts('ID80', sprintf("qqq {interv2} qqq"        ), "qqq 5.55 qqq");  # interpolate float
asserts('ID81', sprintf("qqq {interv3} qqq"        ), "qqq fives qqq"); # interpolate string
asserts('ID82', sprintf("qqq {interh1['fred']} qqq"), "qqq 123 qqq");   # interpolate hash element
asserts('ID83', sprintf("qqq {intera1[0]} qqq"     ), "qqq 456 qqq");   # interpolate array element
asserts('ID84', sprintf("qqq {6+7} qqq"            ), "qqq 13 qqq");    # interpolate expression
asserts('ID85', sprintf("qqq {sqrt(49)} qqq"       ), "qqq 7 qqq");     # interpolate built-in method
asserts('ID86', sprintf("qqq {F1(50)} qqq"         ), "qqq 25 qqq");    # interpolate script method



# We're done
#
println("Passed " . passes . " of " . tests . " tests");

